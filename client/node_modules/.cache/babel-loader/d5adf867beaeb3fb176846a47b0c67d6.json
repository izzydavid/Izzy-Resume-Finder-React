{"ast":null,"code":"import _defineProperty from \"/Users/davidirizarry/Desktop/Macbook/Coding-BootCamp/Coding-BootCamp/25-Project-3/resume_finder/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport decode from 'jwt-decode';\nimport API from \"../utils/API\";\nexport default class AuthService {\n  // Initializing important variables\n  constructor() {\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email1, password1) {\n    alert(email1);\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    let user = {\n      email: email1,\n      password: password1\n    };\n    return API.findUser(user).then(res => {\n      this.setToken(res.data.token); // Setting the token in localStorage\n\n      headers['Authorization'] = 'Bearer ' + this.getToken();\n    }).catch(err => console.log(err));\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // GEtting token from localstorage\n\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired. N\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n  }\n\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n\n  fetch(url, options) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }; // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer ' + this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/davidirizarry/Desktop/Macbook/Coding-BootCamp/Coding-BootCamp/25-Project-3/resume_finder/client/src/components/AuthService.js"],"names":["decode","API","AuthService","constructor","login","bind","getProfile","email1","password1","alert","headers","user","email","password","findUser","then","res","setToken","data","token","getToken","catch","err","console","log","loggedIn","isTokenExpired","decoded","exp","Date","now","idToken","localStorage","setItem","getItem","logout","removeItem","fetch","url","options","_checkStatus","response","json","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\nimport API from \"../utils/API\"\n\nexport default class AuthService {\n    // Initializing important variables\n    constructor() {\n        this.login = this.login.bind(this)\n        this.getProfile = this.getProfile.bind(this)\n\n    }\n\n    login(email1, password1) {\n        alert(email1)\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        let user = { email: email1, password: password1 }\n        return API.findUser(user)\n            .then(res => {\n                this.setToken(res.data.token) // Setting the token in localStorage\n                 headers['Authorization'] = 'Bearer ' + this.getToken()\n               \n\n            })\n            .catch(err => console.log(err));\n\n\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken() // GEtting token from localstorage\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken)\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token')\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n    }\n\n    getProfile() {\n        // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n    }\n\n\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}